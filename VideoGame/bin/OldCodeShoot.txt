	public void shoot()
	{	
		shotsFired++;
		double angle = 0;
		WaveInit w = new WaveInit(10);
		w.start();
		noStroke();
		fill(255);
		for(int x = 0; x < w.processing_x.length; x++)
		{
			int degrees = 0;
			double x_value = (int)w.processing_x[x];
			double y_value = (int)w.processing_y[x];
			Point current = new Point(mouseX, mouseY);
			Point center = new Point((int)this.x, (int)this.y);
			Point previous = new Point((int)(this.x + 100), (int)this.y);
						
			degrees = (int) angleBetween(center, current, previous);		
			angle = (degrees/360.0)*(2*Math.PI);
			
			if(this.y - 20 < mouseY)
				angle = 180 - angle;
			
		//	System.out.println(degrees);
					
			x_value = getRotateX(angle, this.x, this.y, x_value, y_value);
			y_value = getRotateY(angle, this.x, this.y, x_value, y_value);
			
			//vertex((float)x_value, (float)y_value);
			ellipse((float)x_value, (float)y_value, 5, 5);
			//rotate((float)angle);
			
			//System.out.println("X: " + x_value + " ||| Y: " + y_value + " ~~~ Count: " + x);
			if(x >= w.processing_x.length - 1)
			{
				break;
			}		
		}
	}
	
	private double angleBetween(Point center, Point current, Point previous) {
		  float v1x = (float) (current.getX() - center.getX()); 
		  float v1y = (float) (current.getY() - center.getY());

		  //need to normalize:
		  float l1 = (float) Math.sqrt(v1x * v1x + v1y * v1y);
		  v1x /= l1;
		  v1y /= l1;

		  float v2x = (float) (previous.getX() - center.getX());
		  float v2y = (float) (previous.getY() - center.getY());

		  //need to normalize:
		  float l2 = (float) Math.sqrt(v2x * v2x + v2y * v2y);
		  v2x /= l2;
		  v2y /= l2;    

		  double rad = Math.acos( v1x * v2x + v1y * v2y );

		  double degres = Math.toDegrees(rad);
		  return degres;
		}
	
	public static double getRotateX(double angle, double playerX, double playerY, double graphX, double graphY)
	{
			double newX = playerX + (Math.cos(angle) * (graphX-playerX) + Math.sin(angle) * (graphY -playerY));
			return newX;
	}
	
	public static double getRotateY(double angle, double playerX, double playerY, double graphX, double graphY)
	{
		double newY = playerY + (-Math.sin(angle) * (graphX-playerX) + Math.cos(angle) * (graphY -playerY));
		return newY;
	}